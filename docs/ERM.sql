CREATE TYPE "otp_digest_algorithm" AS ENUM (
  'sha1',
  'sha256',
  'sha512'
);

CREATE TYPE "otp_type" AS ENUM (
  'hotp',
  'totp'
);

CREATE TYPE "http_method" AS ENUM (
  'GET',
  'HEAD',
  'POST',
  'PUT',
  'DELETE',
  'CONNECT',
  'OPTIONS',
  'TRACE',
  'PATCH'
);

CREATE TYPE "oauth_type" AS ENUM (
  'private',
  'public'
);

CREATE TYPE "operation_type" AS ENUM (
  'subtraction',
  'percentage'
);

CREATE TYPE "card_brand" AS ENUM (
  'amex',
  'hipercard',
  'diners',
  'visa',
  'mastercard', 
  'american_express',
  'discover',
  'elo',
  'maestro'
);

CREATE TYPE "currency" AS ENUM('aed', 'afn', 'all', 'amd', 'ang', 'aoa', 'ars', 'aud', 'awg', 'azn', 'bam', 'bbd', 'bdt', 'bgn', 'bhd', 'bif', 'bmd', 'bnd', 'bob', 'bov', 'brl', 'bsd', 'btn', 'bwp', 'byr', 'bzd', 'cad', 'cdf', 'che', 'chf', 'chw', 'clf', 'clp', 'cny', 'cop', 'cou', 'crc', 'cup', 'cve', 'czk', 'djf', 'dkk', 'dop', 'dzd', 'ecs', 'egp', 'ern', 'etb', 'eur', 'fjd', 'fkp', 'gbp', 'gel', 'ghs', 'gip', 'gmd', 'gnf', 'gtq', 'gyd', 'hkd', 'hnl', 'htg', 'huf', 'idr', 'ils', 'imp', 'inr', 'iqd', 'irr', 'isk', 'jmd', 'jod', 'jpy', 'kes', 'kgs', 'khr', 'kmf', 'kpw', 'krw', 'kwd', 'kyd', 'kzt', 'lak', 'lbp', 'lkr', 'lrd', 'lsl', 'ltl', 'lvl', 'lyd', 'mad', 'mdl', 'mga', 'mkd', 'mmk', 'mnt', 'mop', 'mro', 'mur', 'mvr', 'mwk', 'mxn', 'mxv', 'myr', 'mzn', 'nad', 'ngn', 'nio', 'nok', 'npr', 'nzd', 'omr', 'pab', 'pen', 'pgk', 'php', 'pkr', 'pln', 'pyg', 'qar', 'ron', 'rsd', 'rub', 'rwf', 'sar', 'sbd', 'scr', 'sdg', 'sek', 'sgd', 'shp', 'sll', 'sos', 'srd', 'stn', 'svc', 'syp', 'szl', 'thb', 'tjs', 'tmt', 'tnd', 'top', 'try', 'ttd', 'twd', 'tzs', 'uah', 'ugx', 'usd', 'usn', 'uss', 'uyi', 'uyu', 'uzs', 'ves', 'vnd', 'vuv', 'wst', 'xaf', 'xag', 'xau', 'xba', 'xbb', 'xbc', 'xbd', 'xcd', 'xdr', 'xfu', 'xof', 'xpd', 'xpf', 'xpt', 'xts', 'xxx', 'yer', 'zar', 'zmw', 'zwl');

CREATE TYPE "product_type" AS ENUM (
  'SIMPLE',
  'GROUPED',
  'VIRTUAL',
  'DOWNLOADABLE',
  'EXTERNAL',
  'VARIABLE',
  'CREDIT'
);

CREATE TYPE "payment_method_type" AS ENUM (
  'CREDIT_CARD',
  'DEBIT_CARD',
  'BANK_ACCOUNT',
  'WALLET'
);

CREATE TYPE "split_type" AS ENUM (
  'FIXED',
  'PERCENTAGE'
);

CREATE TYPE "payment_state" AS ENUM (
  'fraud_detected',
  'fraud_under_review',
  'fraud_confirmed',
  'chargeback_initiated',
  'chargeback_completed',
  'payment_pending',
  'payment_authorized',
  'payment_captured',
  'payment_paid',
  'payment_declined',
  'payment_failed',
  'payment_expired',
  'payment_refunded',
  'payment_refunded_psp',
  'payment_error',
  'subscription_created',
  'subscription_completed',
  'subscription_cancelled',
  'subscription_failed',
  'subscription_expired',
  'subscription_paused',
  'subscription_resumed',
  'boleto_pending',
  'boleto_paid',
  'boleto_expired',
  'boleto_failed',
  'pix_initiated',
  'pix_processing',
  'pix_paid',
  'pix_expired',
  'pix_failed',
  'pix_refunded',
  'pix_refunded_psp'
);

CREATE TABLE "user" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "first_name" varchar(255) NOT NULL,
  "last_name" varchar(255) NOT NULL,
  "username" varchar(255) NOT NULL,
  "picture" text,
  "totp_secret" TEXT NOT NULL,
  "mfa_enabled" boolean DEFAULT false,
  "created_at" timestamp DEFAULT now(),
  "updated_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,

  CHECK(disabled_at > created_at)
);

CREATE TABLE "password" (
  "user_id" uuid NOT NULL,
  "hash" text NOT NULL,
  "algorithm" varchar(255) NOT NULL,
  "iterations" int NOT NULL,
  "salt" text NOT NULL,
  "secret_manager_version" VARCHAR(255),
  "created_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,

  CHECK(disabled_at > created_at),
  PRIMARY KEY ("user_id", "hash", "algorithm", "iterations", "salt", "secret_manager_version"),
  FOREIGN KEY ("user_id") REFERENCES "user" ("id")
);

CREATE TABLE "phone" (
  "user_id" uuid NOT NULL,
  "number" varchar(255) NOT NULL,
  "created_at" timestamp DEFAULT now(),
  "confirmed_at" timestamp,
  "updated_at" timestamp NOT NULL DEFAULT now(),
  "disabled_at" timestamp,
  
  CHECK(confirmed_at > created_at),
  CHECK(updated_at >= created_at),
  CHECK(disabled_at > confirmed_at),
  CHECK(disabled_at > created_at),
  PRIMARY KEY ("user_id", "number"),
  FOREIGN KEY ("user_id") REFERENCES "user" ("id")
);

CREATE TABLE "phone_message_provider" (
  "id" INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  "name" varchar(255) NOT NULL UNIQUE,
  "picture" text,
  "client_id" varchar(255) NOT NULL,
  "client_secret" varchar(255) NOT NULL,
  "created_at" timestamp DEFAULT now(),
  "updated_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,

  CHECK(disabled_at > created_at)
);

CREATE TABLE "phone_messager" (
  "phone_message_provider_id" int NOT NULL,
  "user_id" uuid NOT NULL,
  "phone" varchar(255) NOT NULL,
  "created_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,

  CHECK(disabled_at > created_at),
  PRIMARY KEY ("phone_message_provider_id", "user_id", "phone"),
  FOREIGN KEY ("phone_message_provider_id") REFERENCES "phone_message_provider" ("id") ON DELETE RESTRICT ON UPDATE CASCADE,
  FOREIGN KEY ("user_id", "phone") REFERENCES "phone" ("user_id", "number") ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE "email" (
  "user_id" uuid NOT NULL,
  "address" varchar(255) NOT NULL,
  "created_at" timestamp DEFAULT now(),
  "updated_at" timestamp NOT NULL DEFAULT now(),
  "confirmed_at" timestamp,
  "disabled_at" timestamp,

  CHECK(confirmed_at > created_at),
  CHECK(updated_at >= created_at),
  CHECK(disabled_at > confirmed_at),
  CHECK(disabled_at > created_at),
  PRIMARY KEY ("user_id", "address"),
  FOREIGN KEY ("user_id") REFERENCES "user" ("id")
);

CREATE TABLE "otp" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "secret" varchar(255) NOT NULL,
  "digestAlgorithm" otp_digest_algorithm NOT NULL,
  "length" int NOT NULL,
  "variation" int NOT NULL,
  "type" otp_type NOT NULL,
  "user_id" uuid NOT NULL,
  "confirmed_at" timestamp,
  "created_at" timestamp DEFAULT now(),
  "updated_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,

  CHECK(length > 0),
  CHECK(variation >= 0),
  CHECK(confirmed_at > created_at),
  CHECK(disabled_at > confirmed_at),
  CHECK(disabled_at > created_at),
  UNIQUE ("secret", "digestAlgorithm", "length", "type"),
  FOREIGN KEY ("user_id") REFERENCES "user" ("id")
);

CREATE TABLE "passkey" (
  "credential_id" text PRIMARY KEY NOT NULL,
  "public_key" text NOT NULL UNIQUE,
  "device_name" varchar(255) NOT NULL,
  "user_id" uuid NOT NULL,
  "created_at" timestamp DEFAULT now(),
  "updated_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,

  CHECK(disabled_at > created_at),
  FOREIGN KEY ("user_id") REFERENCES "user" ("id")
);

CREATE TABLE "identity_provider" (
  "id" INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  "name" varchar(255) NOT NULL UNIQUE,
  "picture" text NOT NULL,
  "client_id" varchar(255) NOT NULL,
  "client_secret" varchar(255) NOT NULL,
  "created_at" timestamp DEFAULT now(),
  "updated_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,

  CHECK(disabled_at > created_at)
);

CREATE TABLE "sign_in_with" (
  "identity_provider_id" int NOT NULL,
  "user_id" uuid NOT NULL,
  "username" varchar(255) NOT NULL,
  "name" varchar(255) NOT NULL,
  "picture" text,
  "access_token" varchar(255) NOT NULL,
  "expires_in" timestamp NOT NULL,
  "refresh_token" varchar(255) NOT NULL,
  "refresh_token_expires_in" timestamp,
  "created_at" timestamp DEFAULT now(),
  "updated_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,
  
  CHECK(expires_in > created_at),
  CHECK(refresh_token_expires_in > created_at),
  CHECK(disabled_at > created_at),
  UNIQUE ("identity_provider_id", "username"),
  PRIMARY KEY ("identity_provider_id", "user_id", "username"),
  FOREIGN KEY ("identity_provider_id") REFERENCES "identity_provider" ("id"),
  FOREIGN KEY ("user_id") REFERENCES "user" ("id")
);

CREATE TABLE "account" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "name" varchar(255) NOT NULL,
  "picture" text,
  "created_at" timestamp DEFAULT now(),
  "updated_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,
  "deleted_at" timestamp,

  CHECK(disabled_at > created_at)
);

CREATE TABLE "scope" (
  "id" INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  "label" VARCHAR(255) NOT NULL UNIQUE,
  "uri" varchar(255),
  "method" http_method,
  "created_at" timestamp DEFAULT now(),
  "updated_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,

  CHECK(updated_at >= created_at),
  CHECK(disabled_at > created_at)
);

CREATE TABLE "role" (
  "id" INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  "name" varchar(255) NOT NULL,
  "account_id" uuid NOT NULL,
  "user_id" uuid NOT NULL, -- the creator
  "created_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,

  CHECK(disabled_at > created_at),
  UNIQUE ("name", "account_id"),
  FOREIGN KEY ("account_id") REFERENCES "account" ("id"),
  FOREIGN KEY ("user_id") REFERENCES "user" ("id")
);

CREATE TABLE "acl" (
  "role_id" int NOT NULL,
  "scope_id" int NOT NULL,
  "created_at" timestamp DEFAULT now(),

  PRIMARY KEY ("role_id", "scope_id"),
  FOREIGN KEY ("role_id") REFERENCES "role" ("id"),
  FOREIGN KEY ("scope_id") REFERENCES "scope" ("id")
);

CREATE TABLE "member" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "account_id" uuid NOT NULL,
  "user_id" uuid NOT NULL,
  "role_id" int NOT NULL,
  "created_at" timestamp DEFAULT now(),
  "confirmed_at" timestamp,
  "updated_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,

  CHECK(confirmed_at > created_at),
  CHECK(disabled_at > confirmed_at),
  CHECK(disabled_at > created_at),
  UNIQUE ("account_id", "user_id"),
  FOREIGN KEY ("account_id") REFERENCES "account" ("id"),
  FOREIGN KEY ("user_id") REFERENCES "user" ("id"),
  FOREIGN KEY ("role_id") REFERENCES "role" ("id")
);

CREATE TABLE "api_token" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "token" text NOT NULL UNIQUE,
  "member_id" uuid NOT NULL,
  "role_id" int NOT NULL,
  "starts_in" timestamp NOT NULL,
  "expires_in" timestamp NOT NULL,
  "created_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,

  CHECK(expires_in > starts_in),
  CHECK(starts_in >= created_at),
  CHECK(disabled_at > created_at),
  FOREIGN KEY ("member_id") REFERENCES "member" ("id"),
  FOREIGN KEY ("role_id") REFERENCES "role" ("id")
);

CREATE TABLE "oauth" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "name" varchar(255) NOT NULL,
  "picture" text,
  "homepage_url" text NOT NULL,
  "privacy_policy_url" text NOT NULL,
  "terms_of_service_url" text NOT NULL,
  "redirect_url" text NOT NULL,
  "type" oauth_type NOT NULL,
  "member_id" uuid NOT NULL,
  "role_id" int NOT NULL,
  "created_at" timestamp DEFAULT now(),
  "updated_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,

  CHECK(disabled_at > created_at),
  UNIQUE ("name", "member_id"),
  FOREIGN KEY ("member_id") REFERENCES "member" ("id"),
  FOREIGN KEY ("role_id") REFERENCES "role" ("id")
);

CREATE TABLE "oauth_access_token" (
  "token" varchar(255) PRIMARY KEY NOT NULL,
  "oauth_id" uuid NOT NULL UNIQUE,
  "expires_in" timestamp NOT NULL,
  "created_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,

  CHECK(expires_in > created_at),
  CHECK(disabled_at > created_at),
  FOREIGN KEY ("oauth_id") REFERENCES "oauth" ("id")
);

CREATE TABLE "oauth_refresh_token" (
  "token" varchar(255) PRIMARY KEY NOT NULL,
  "oauth_id" uuid NOT NULL UNIQUE,
  "expires_in" timestamp NOT NULL,
  "created_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,

  CHECK(expires_in > created_at),
  CHECK(disabled_at > created_at),
  FOREIGN KEY ("oauth_id") REFERENCES "oauth" ("id")
);

--------------------------------------------------

CREATE TABLE "address" (
  "id" INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  "country" varchar(255) NOT NULL,
  "postal_code" varchar(255) NOT NULL,
  "region" varchar(255) NOT NULL,
  "city" varchar(255) NOT NULL,
  "locality" varchar(255) NOT NULL,
  "street" varchar(255) NOT NULL,
  "created_at" timestamp DEFAULT now(),
  "updated_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,

  CHECK(disabled_at > created_at),
  CHECK(updated_at >= created_at)
);

CREATE TABLE "customer" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "account_id" uuid NOT NULL,
  "tax_id" varchar(255) NOT NULL,
  "is_legal_person" boolean NOT NULL,
  "default_customer_address_id" int,
  "default_payment_method_id" uuid,
  "created_at" timestamp DEFAULT now(),
  "updated_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,

  UNIQUE ("account_id", "tax_id"),

  CHECK(disabled_at > created_at),
  CHECK(updated_at >= created_at),
  FOREIGN KEY ("account_id") REFERENCES "account" ("id") ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE "customer_address" (
  "id" INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  "customer_id" uuid NOT NULL,
  "address_id" int NOT NULL,
  "number" varchar(255) NOT NULL,
  "note" text,
  "created_at" timestamp DEFAULT now(),
  "updated_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,

  UNIQUE ("customer_id", "address_id", "number"),

  FOREIGN KEY ("customer_id") REFERENCES "customer" ("id") ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY ("address_id") REFERENCES "address" ("id") ON DELETE RESTRICT ON UPDATE CASCADE
);

ALTER TABLE "customer" 
  ADD CONSTRAINT fk_customer_default_customer_address 
    FOREIGN KEY ("default_customer_address_id") REFERENCES "customer_address" ("id") ON DELETE RESTRICT ON UPDATE CASCADE;

CREATE TABLE "credit_card" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "customer_id" uuid NOT NULL,
  "token" text NOT NULL UNIQUE,
  "gateway_token" varchar(255) NOT NULL,
  "brand" card_brand NOT NULL,
  "last_four_digits" varchar(4) NOT NULL,
  "holder_name" varchar(255) NOT NULL,
  "expiration_month" int NOT NULL,
  "expiration_year" int NOT NULL,
  "gateway_provider" varchar(50) NOT NULL,
  "created_at" timestamp DEFAULT now(),
  "updated_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,

  CHECK(expiration_month BETWEEN 1 AND 12),
  CHECK(expiration_year >= EXTRACT(YEAR FROM now())),
  CHECK(disabled_at > created_at),
  FOREIGN KEY ("customer_id") REFERENCES "customer" ("id")
);

CREATE TABLE "discount" (
  "id" INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  "title" varchar(255) NOT NULL,
  "description" text,
  "percent" DECIMAL(10,2),
  "cap_amount" DECIMAL(10,2) NOT NULL,
  "currency" currency NOT NULL,
  "is_cumulative" boolean DEFAULT false,
  "starts_in" timestamp NOT NULL DEFAULT now(),
  "expires_in" timestamp,
  "created_at" timestamp DEFAULT now(),
  "updated_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,

  CHECK(percent >= 0 AND percent <= 1),
  CHECK(cap_amount >= 0),
  CHECK(starts_in >= created_at),
  CHECK(expires_in > starts_in),
  CHECK(starts_in < expires_in),
  CHECK(disabled_at > created_at),
  CHECK(updated_at >= created_at)
);

CREATE TABLE "coupon" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "discount_id" int NOT NULL,
  "code" varchar(255) NOT NULL UNIQUE,
  "quantity" int NOT NULL,

  FOREIGN KEY ("discount_id") REFERENCES "discount" ("id")
);

CREATE TABLE "product" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "title" varchar(255) NOT NULL,
  "description" text,
  "picture" text,
  "type" product_type NOT NULL,
  "sku" varchar(255) UNIQUE,
  "discount_id" int,
  "renewal_period_days" int NOT NULL DEFAULT 0, -- cycle in days
  "max_renewal_uses" int NOT NULL DEFAULT 1, -- maximum number of renewals
  "data" text,
  "cancel_window_days" int NOT NULL DEFAULT 0,
  "starts_in" timestamp NOT NULL DEFAULT now(),
  "expires_in" timestamp,
  "created_at" timestamp DEFAULT now(),
  "updated_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,

  CHECK(renewal_period_days >= 0),
  CHECK(max_renewal_uses >= 1),
  CHECK(starts_in >= created_at),
  CHECK(expires_in > starts_in),
  CHECK(starts_in < expires_in),
  CHECK(disabled_at > created_at),
  CHECK(updated_at >= created_at),
  FOREIGN KEY ("discount_id") REFERENCES "discount" ("id")
);

CREATE TABLE "price" (
  "id" int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  "product_id" uuid NOT NULL,
  "amount" numeric(15, 2) NOT NULL,
  "currency" currency NOT NULL,
  "created_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,

  CHECK(amount >= 0),
  CHECK(disabled_at > created_at),
  FOREIGN KEY ("product_id") REFERENCES "product" ("id")
);

CREATE TABLE  "split" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "account_id" uuid NOT NULL,
  "title" VARCHAR(255) NOT NULL,
  "description" TEXT,
  "assume_fee" boolean NOT NULL DEFAULT false,
  "created_at" timestamp NOT NULL DEFAULT now(),
  "updated_at" timestamp NOT NULL DEFAULT now(),
  "disabled_at" timestamp,

  UNIQUE ("account_id", "title"),

  FOREIGN KEY ("account_id") REFERENCES "account" ("id") ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE  "split_receiver" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "split_id" uuid NOT NULL,
  "customer_id" uuid NOT NULL,
  "type" split_type NOT NULL,
  "value" NUMERIC(15, 2) NOT NULL,
  "currency" currency NOT NULL,
  "note" TEXT,
  "created_at" timestamp NOT NULL DEFAULT now(),
  "disabled_at" timestamp,

  CHECK (
    (type = 'PERCENTAGE' AND value BETWEEN 0 AND 1)
    OR
    (type = 'FIXED' AND value >= 0)
  )

  FOREIGN KEY ("split_id") REFERENCES "split" ("id") ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY ("customer_id") REFERENCES "customer" ("id") ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE "order" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "customer_id" uuid NOT NULL,
  "coupon_id" uuid,
  "split_id" uuid,
  "is_recurrent" boolean DEFAULT false,
  "note" text,
  "created_at" timestamp DEFAULT now(),
  "confirmed_at" timestamp,
  "disabled_at" timestamp,
  "canceled_at" timestamp,

  CHECK(canceled_at > created_at),
  CHECK(confirmed_at > created_at),
  CHECK(disabled_at > confirmed_at),
  CHECK(disabled_at > created_at),
  FOREIGN KEY ("customer_id") REFERENCES "customer" ("id"),
  FOREIGN KEY ("coupon_id") REFERENCES "coupon" ("id"),
  FOREIGN KEY ("split_id") REFERENCES "split" ("id")
);

CREATE TABLE "item" (
  "order_id" uuid NOT NULL,
  "product_id" uuid NOT NULL,
  "quantity" int NOT NULL,
  -- Start snapshot of the product at the time of purchase
  "price_id" int NOT NULL,
  "discount_id" int,
  "renewal_period_days" int NOT NULL DEFAULT 0,
  "max_renewal_uses" int,
  -- End snapshot of the product at the time of purchase
  "created_at" timestamp DEFAULT now(),
  "updated_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,

  PRIMARY KEY ("order_id", "product_id"),

  CHECK(quantity >= 1),
  CHECK(updated_at >= created_at),
  CHECK(disabled_at > created_at),
  FOREIGN KEY ("order_id") REFERENCES "order" ("id"),
  FOREIGN KEY ("product_id") REFERENCES "product" ("id"),
  FOREIGN KEY ("price_id") REFERENCES "price" ("id"),
  FOREIGN KEY ("discount_id") REFERENCES "discount" ("id")
);

CREATE TABLE "voucher" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "discount_id" int NOT NULL,
  "code" varchar(255) NOT NULL UNIQUE,
  "customer_id" uuid NOT NULL,
  "order_id" uuid,

  FOREIGN KEY ("discount_id") REFERENCES "discount" ("id"),
  FOREIGN KEY ("customer_id") REFERENCES "customer" ("id"),
  FOREIGN KEY ("order_id") REFERENCES "order" ("id")
);

CREATE TABLE  "payment_gateway" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "name" VARCHAR(255) NOT NULL UNIQUE,
  "picture" TEXT NOT NULL,
  "endpoint" VARCHAR(255) NOT NULL,
  "client_id" VARCHAR(255) NOT NULL,
  "client_secret" TEXT NOT NULL,
  "created_at" timestamp NOT NULL DEFAULT now(),
  "updated_at" timestamp NOT NULL DEFAULT now(),
  "disabled_at" timestamp	
);

CREATE TABLE  "receiver_gateway" (
  "customer_id" uuid NOT NULL,
  "payment_gateway_id" uuid NOT NULL,
  "split_receiver_id" uuid NOT NULL,
  "created_at" timestamp NOT NULL DEFAULT now(),
  "updated_at" timestamp NOT NULL DEFAULT now(),
  "disabled_at" timestamp,

  PRIMARY KEY ("customer_id", "payment_gateway_id", "split_receiver_id"),

  FOREIGN KEY ("customer_id") REFERENCES "customer" ("id") ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY ("payment_gateway_id") REFERENCES "payment_gateway" ("id") ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY ("split_receiver_id") REFERENCES "split_receiver" ("id") ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE  "payment_method" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "customer_id" uuid NOT NULL,
  "title" VARCHAR(255) NOT NULL,
  "description" TEXT,
  "payment_gateway_id" uuid NOT NULL,
  "payment_gateway_external_id" VARCHAR(255) NOT NULL,
  "type" payment_method_type NOT NULL,
  "created_at" timestamp NOT NULL DEFAULT now(),
  "updated_at" timestamp NOT NULL DEFAULT now(),
  "disabled_at" timestamp,

  UNIQUE ("customer_id", "payment_gateway_id", "payment_gateway_external_id"),
  UNIQUE ("customer_id", "title"),

  FOREIGN KEY ("customer_id") REFERENCES "customer" ("id") ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY ("payment_gateway_id") REFERENCES "payment_gateway" ("id") ON DELETE CASCADE ON UPDATE CASCADE
);

ALTER TABLE "customer" 
  ADD CONSTRAINT fk_customer_default_payment_method 
    FOREIGN KEY ("default_payment_method_id") REFERENCES "payment_method" ("id") ON DELETE RESTRICT ON UPDATE CASCADE;

CREATE TABLE  "payment" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "invoice_id" uuid REFERENCES invoice (id),
  "payment_method_id" uuid NOT NULL,
  "amount" numeric(15, 2) NOT NULL,
  "currency" currency NOT NULL,
  "instalments" int NOT NULL DEFAULT 1,
  "created_at" timestamp NOT NULL DEFAULT now(),
  "disabled_at" timestamp,

  FOREIGN KEY ("invoice_id") REFERENCES "invoice" ("id") ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY ("payment_method_id") REFERENCES "payment_method" ("id") ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE  "payment_status" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "payment_id" uuid NOT NULL,
  "transaction_id" TEXT NOT NULL,
  "data" TEXT NOT NULL,
  "state" payment_state NOT NULL,
  "created_at" timestamp NOT NULL DEFAULT now(),

  UNIQUE ("payment_id", "transaction_id"),

  FOREIGN KEY ("payment_id") REFERENCES "payment" ("id") ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE  "invoice" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "order_id" uuid NOT NULL,
  "amount_due" numeric(15, 2) NOT NULL,
  "tax_amount" numeric(15, 2) NOT NULL,
  "shipping_amount" numeric(15,2) NOT NULL DEFAULT 0,
  "paid_amount" numeric(15, 2) NOT NULL DEFAULT 0,
  "refunded_amount" numeric(15, 2) NOT NULL DEFAULT 0,
  "refunded_note" text,
  "note" text,
  "paid_at" timestamp,
  "refunded_at" timestamp,
  "created_at" timestamp NOT NULL DEFAULT now(),
  "starts_in" timestamp NOT NULL,
  "expires_in" timestamp,

  CHECK(starts_in >= created_at),
  CHECK(expires_in > starts_in),
  FOREIGN KEY ("order_id") REFERENCES "order" ("id") ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE  "offer" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "title" VARCHAR(255) NOT NULL UNIQUE,
  "description" TEXT,
  "created_at" timestamp NOT NULL DEFAULT now(),
  "updated_at" timestamp NOT NULL DEFAULT now(),
  "disabled_at" timestamp
);

CREATE TABLE  "offer_item" (
  "offer_id" uuid NOT NULL,
  "product_id" uuid NOT NULL,
  "quantity" int NOT NULL DEFAULT 1,
  "created_at" timestamp NOT NULL DEFAULT now(),
  "updated_at" timestamp NOT NULL DEFAULT now(),
  PRIMARY KEY ("offer_id", "product_id"),

  FOREIGN KEY ("offer_id") REFERENCES "offer" ("id") ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY ("product_id") REFERENCES "product" ("id") ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE "consumption" (
  "id" INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  "account_id" uuid NOT NULL,
  "data" text NOT NULL,
  "amount" numeric(15, 2) NOT NULL,
  "created_at" timestamp DEFAULT now(),
  "disabled_at" timestamp,

  CHECK(amount >= 0),
  CHECK(disabled_at > created_at),
  FOREIGN KEY ("account_id") REFERENCES "account" ("id")
);