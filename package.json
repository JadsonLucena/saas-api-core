{
  "name": "saas-api-core",
  "version": "0.1.0",
  "description": "Worry about developing only your application's business rules. Extend this core API in Typescript to manage users, projects and payment plans. The design of this project was based on the principles of clean architecture and Domain-Driven Design (DDD)",
  "engines": {
    "node": ">=20"
  },
  "type": "module",
  "main": "./src/index.ts",
  "scripts": {
    "start:dev": "node --trace-warnings --env-file=.env.test --experimental-strip-types --inspect --watch ./src/index.ts",
    "start": "node --trace-warnings --experimental-strip-types ./src/index.ts",
    "lint": "eslint .",
    "lint:fix": "npm run lint -- --fix",
    "clean": "rm -rf ./coverage && rm -f ./Cert.pem ./Key.pem",
    "test": "run-p --prefix-colors auto --print-label test:unit test:integration test:E2E",
    "test:coverage": "run-s test:unit:coverage test:integration:coverage test:E2E:coverage",
    "posttest:coverage": "c8 report --reporter=html --reporter=text-lcov > coverage/lcov.info",
    "test:unit": "node --env-file=.env.test --experimental-strip-types --test test/unit/**/*.test.ts",
    "test:unit:coverage": "c8 --clean=false node --env-file=.env.test --experimental-strip-types --test test/unit/**/*.test.ts",
    "pretest:integration:cacheDB": "docker-compose --profile cacheDB --env-file=.env.test up -d --build --force-recreate",
    "test:integration:cacheDB": "node --env-file=.env.test --experimental-strip-types --test test/integration/cacheDB/*.test.ts",
    "posttest:integration:cacheDB": "docker-compose --profile cacheDB down -v",
    "pretest:integration:cacheDB:coverage": "npm run pretest:integration:cacheDB",
    "test:integration:cacheDB:coverage": "c8 --clean=false node --env-file=.env.test --experimental-strip-types --test test/integration/cacheDB/*.test.ts",
    "posttest:integration:cacheDB:coverage": "npm run posttest:integration:cacheDB",
    "pretest:integration:DB": "docker-compose --profile DB --env-file=.env.test up -d --build --force-recreate",
    "test:integration:DB": "node --env-file=.env.test --experimental-strip-types --test test/integration/DB/*.test.ts",
    "posttest:integration:DB": "docker-compose --profile DB down -v",
    "pretest:integration:DB:coverage": "npm run pretest:integration:DB",
    "test:integration:DB:coverage": "c8 --clean=false node --env-file=.env.test --experimental-strip-types --test test/integration/DB/*.test.ts",
    "posttest:integration:DB:coverage": "npm run posttest:integration:DB",
    "pretest:integration:SM:aws": "terraform -chdir=IaC/aws init -upgrade -input=false && terraform -chdir=IaC/aws apply -target=module.secrets_manager -var='RECOVERY_WINDOW_IN_DAYS=0' -auto-approve",
    "test:integration:SM:aws": "node --env-file=.env.test --experimental-strip-types --test test/integration/SM/AWS.test.ts",
    "posttest:integration:SM:aws": "terraform -chdir=IaC/aws destroy -target=module.secrets_manager -auto-approve",
    "pretest:integration:SM:aws:coverage": "npm run pretest:integration:SM:aws",
    "test:integration:SM:aws:coverage": "c8 --clean=false node --env-file=.env.test --experimental-strip-types --test test/integration/SM/AWS.test.ts",
    "posttest:integration:SM:aws:coverage": "npm run posttest:integration:SM:aws",
    "pretest:integration:SM:gcp": "terraform -chdir=IaC/gcp init -upgrade -input=false && terraform -chdir=IaC/gcp apply -target=module.secrets_manager -auto-approve",
    "test:integration:SM:gcp": "node --env-file=.env.test --experimental-strip-types --test test/integration/SM/Google.test.ts",
    "posttest:integration:SM:gcp": "terraform -chdir=IaC/gcp destroy -target=module.secrets_manager -auto-approve",
    "pretest:integration:SM:gcp:coverage": "npm run pretest:integration:SM:gcp",
    "test:integration:SM:gcp:coverage": "c8 --clean=false node --env-file=.env.test --experimental-strip-types --test test/integration/SM/Google.test.ts",
    "posttest:integration:SM:gcp:coverage": "npm run posttest:integration:SM:gcp",
    "pretest:integration:SM:azure": "terraform -chdir=IaC/azure init -upgrade -input=false && terraform -chdir=IaC/azure apply -target=module.secrets_manager -auto-approve",
    "test:integration:SM:azure": "node --env-file=.env.test --experimental-strip-types --test test/integration/SM/Azure.test.ts",
    "posttest:integration:SM:azure": "terraform -chdir=IaC/azure destroy -target=module.secrets_manager -var='PURGE_KEY_VAULT=true' -auto-approve",
    "pretest:integration:SM:azure:coverage": "npm run pretest:integration:SM:azure",
    "test:integration:SM:azure:coverage": "c8 --clean=false node --env-file=.env.test --experimental-strip-types --test test/integration/SM/Azure.test.ts",
    "posttest:integration:SM:azure:coverage": "npm run posttest:integration:SM:azure",
    "test:integration:SM": "run-s test:integration:SM:*",
    "test:integration:SM:coverage": "run-s test:integration:SM:*:coverage",
    "test:integration": "run-p test:integration:cacheDB test:integration:SM",
    "test:integration:coverage": "run-s test:integration:DB:coverage test:integration:cacheDB:coverage test:integration:SM:coverage",
    "pretest:E2E": "openssl req -new -newkey rsa:4096 -x509 -sha256 -days 1 -nodes -out ./Cert.pem -keyout ./Key.pem -subj '/C=UA/ST=Some-State/L=/O=Internet Widgits Pty Ltd/OU=/CN=' > /dev/null 2>&1 && docker-compose --profile E2E --env-file=.env.test up -d --build --force-recreate",
    "test:E2E": "node --env-file=.env.test --experimental-strip-types --test test/E2E/**/*.test.ts",
    "posttest:E2E": "rm -f ./Cert.pem ./Key.pem && docker-compose --profile E2E down -v",
    "pretest:E2E:coverage": "npm run pretest:E2E",
    "test:E2E:coverage": "c8 --clean=false node --env-file=.env.test --experimental-strip-types --test test/E2E/**/*.test.ts",
    "posttest:E2E:coverage": "npm run posttest:E2E"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/JadsonLucena/api-core.git"
  },
  "keywords": [
    "api",
    "http",
    "http2",
    "rest",
    "soap",
    "graphql",
    "grpc"
  ],
  "author": "JadsonLucena",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/JadsonLucena/api-core/issues"
  },
  "homepage": "https://github.com/JadsonLucena/api-core#readme",
  "dependencies": {
    "@aws-sdk/client-secrets-manager": "latest",
    "@aws-sdk/credential-providers": "latest",
    "@azure/identity": "4.12.0",
    "@azure/keyvault-secrets": "latest",
    "@fastify/multipart": "latest",
    "@fastify/static": "latest",
    "@google-cloud/secret-manager": "latest",
    "@mysql/xdevapi": "latest",
    "@types/mssql": "latest",
    "@types/pg": "latest",
    "fastify": "latest",
    "generic-pool": "latest",
    "jsonwebtoken": "latest",
    "memcached": "latest",
    "mssql": "latest",
    "pg": "latest",
    "redis": "latest"
  },
  "devDependencies": {
    "@eslint/compat": "latest",
    "@eslint/js": "latest",
    "@types/node": "latest",
    "c8": "latest",
    "eslint": "latest",
    "eslint-plugin-security": "latest",
    "eslint-plugin-sonarjs": "latest",
    "globals": "latest",
    "jiti": "latest",
    "npm-run-all": "latest",
    "typescript-eslint": "latest"
  }
}
